#include <WiFi.h>          
#include <PubSubClient.h>
#include <DHT.h>
#include <Wire.h>
#include <SPI.h>
#include <MFRC522.h>
#include<LiquidCrystal_I2C.h>      


// Định nghĩa chân kết nối của DHT11
#define DHTPIN 12
#define DHTTYPE DHT11 // DHT 11


//RFID
#define SS_PIN 5
#define RST_PIN 4


#define LED_PIN_1 4
#define LED_PIN_2 2
#define LED_PIN_3 15
#define BUTTON_PIN_1 25  
#define BUTTON_PIN_2 26  
#define BUTTON_PIN_3 27   


#define NTP_SERVER     "pool.ntp.org"
#define UTC_OFFSET     0
#define UTC_OFFSET_DST 0


// MQTT
#define humidity_topic "humidity"
#define temperature_topic "temperature"
#define rfid_topic "rfid"
#define button_topic_1 "button1"
#define lightbulb_topic "lightbulbtwo"


const char* ssid = "Luan";
const char* password = "12345678";
const char* mqtt_server = "192.168.43.134";


float t; // Nhiệt độ
float h; // Độ ẩm
int UID[4]; // ID RFID
String cardUID = "";


int interval = 10000; // Khoảng thời gian giữa các đọc dữ liệu DHT11
unsigned long previousMillis = 0; // Thời gian kể từ sự kiện cuối cùng được kích hoạt


WiFiClient espClient;
PubSubClient client(espClient);
// LCD
LiquidCrystal_I2C LCD = LiquidCrystal_I2C(0x27, 16, 2);
//DHT
DHT dht(DHTPIN, DHTTYPE);
// RFID
MFRC522 mfrc522(SS_PIN, RST_PIN);


void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN_1, OUTPUT);
  pinMode(LED_PIN_2, OUTPUT);
  pinMode(LED_PIN_3, OUTPUT);
  pinMode(BUTTON_PIN_1, INPUT_PULLUP);
  pinMode(BUTTON_PIN_2, INPUT_PULLUP);
  pinMode(BUTTON_PIN_3, INPUT_PULLUP);
  dht.begin();
  setup_wifi();
  setup_lcd();
  setup_rfid();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}


void loop() {
  if (!client.connected()) {
    reconnect();
  }
  mqtt_DHT11();
  mqtt_Rfid();
  client.loop();
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(temperature_topic, String(t).c_str(), true);
      client.publish(humidity_topic, String(h).c_str(), true);
      client.publish(rfid_topic, cardUID.c_str(), true);
      // ... and resubscribe
      client.subscribe(lightbulb_topic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void callback(char* topic, byte* payload, unsigned int length) {
  // Xử lý dữ liệu từ chủ đề MQTT
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  if (strcmp(topic, lightbulb_topic) == 0) {
    // Chuyển đổi dữ liệu payload thành chuỗi
    String message = "";
    for (int i = 0; i < length; i++) {
      message += (char)payload[i];
    }


    // In ra Serial để kiểm tra dữ liệu nhận được từ MQTT broker
    Serial.println(message);


    // Kiểm tra xem thông báo từ MQTT là "ON" hay không
    if (message == "ON") {
      digitalWrite(LED_PIN_2, HIGH);
      Serial.println("Đèn đã bật!"); // In ra Serial để kiểm tra
    }else {
      Serial.println("Đèn tắt");
      digitalWrite(LED_PIN_2, LOW);
    }
  }
}


void update_temp_hum() {
  // Đọc dữ liệu từ cảm biến DHT11
  // h = dht.readHumidity();
  // t = dht.readTemperature();
  h = random(60);
  t = random(40);
  // Kiểm tra xem đọc dữ liệu có thành công không
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
}


void mqtt_DHT11() {
  unsigned long currentMillis = millis();
  if ((unsigned long)(currentMillis - previousMillis) >= interval) {
    previousMillis = currentMillis;
   
    // Đọc và gửi dữ liệu từ cảm biến DHT11 đến chủ đề MQTT
    update_temp_hum();
   
    // Serial.print("Temperature: ");
    // Serial.println(t);
    client.publish(temperature_topic, String(t).c_str(), true);


    // Serial.print("Humidity: ");
    // Serial.println(h);
    client.publish(humidity_topic, String(h).c_str(), true);
  }
}


// WiFI
void setup_wifi() {
  WiFi.begin(ssid, password); // Connect to Wifi
  while (WiFi.status() != WL_CONNECTED) { // Check if wifi is connected or not
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP()); // Print the IP address in the serial monitor windows.
}


// RFID
void setup_rfid() {
  SPI.begin(); // Init SPI bus
  mfrc522.PCD_Init(); // Init MFRC522
}
void loop_read_rfid() {
  if(!mfrc522.PICC_IsNewCardPresent()) return;
  if(!mfrc522.PICC_ReadCardSerial()) return;
  Serial.print("Mã thẻ của bạn: ");
  cardUID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    UID[i] = mfrc522.uid.uidByte[i];
    // Convert each byte to a two-character hexadecimal representation
    if (UID[i] < 0x10) {
        cardUID += "0"; // Add leading zero if the byte is less than 0x10
    }
    cardUID += String(UID[i], HEX); // Convert byte to hexadecimal and add to the string
    cardUID += " "; // Add a space between bytes
  }


  Serial.print("Mã thẻ của bạn: ");
  Serial.println(cardUID);
  Serial.println("-----");
 
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}


void mqtt_Rfid() {
  loop_read_rfid();
}
// LCD
void setup_lcd() {
  LCD.init();  
  LCD.backlight();
  default_lcd();
  configTime(UTC_OFFSET, UTC_OFFSET_DST, NTP_SERVER);
}


void default_lcd(){
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    LCD.setCursor(0, 1);
    LCD.println("Connection Err");
    return;
  }
  timeinfo.tm_hour +=7; // giờ việt nam
  mktime(&timeinfo);


  LCD.clear();
  LCD.setCursor(0, 0);
  LCD.println(&timeinfo, "%d/%m/%Y   %Z");
  LCD.setCursor(0, 1);
  LCD.println(&timeinfo, "%H:%M");
  LCD.setCursor(7, 1);
  LCD.println("Checking!");
}
